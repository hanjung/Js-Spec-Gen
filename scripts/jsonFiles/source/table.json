{
  "name": "Table",
  "description": "Represents a table in a OneNote page.",
  "isCollection": false,
  "collectionOf": null,
  "restPath": null,
  "info": {
    "version": "1.1",
    "addedIn": "1.1",
    "addinTypes": [
      "OneNote"
    ],
    "nameSpace": "OneNote",
    "addinHosts": [
      "Task pane"
    ],
    "title": "Office JavaScript Add-in API",
    "description": "Office JavaScript Add-in API"
  },
  "properties": [
    {
      "name": "id",
      "dataType": "string",
      "description": "Gets the ID of the table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "isKey": null,
      "notes": null
    },
    {
      "name": "paragraph",
      "dataType": "Paragraph",
      "description": "Gets the Paragraph object that contains the Table object.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "isKey": null,
      "notes": null
    },
    {
      "name": "rows",
      "dataType": "TableRowCollection",
      "description": "Gets all of the table rows.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "isKey": null,
      "notes": null
    },
    {
      "name": "rowCount",
      "dataType": "int",
      "description": "Gets the number of rows in the table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "isKey": null,
      "notes": null
    },
    {
      "name": "columnCount",
      "dataType": "int",
      "description": "Gets the number of columns in the table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "isKey": null,
      "notes": null
    },
    {
      "name": "borderVisible",
      "dataType": "bool",
      "description": "Gets or sets whether the borders are visible or not. True if they are visible, false if they are hidden.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "isKey": null,
      "notes": null
    }
  ],
  "methods": [
    {
      "name": "insertRow",
      "returnType": "TableRow",
      "description": "Inserts a row at the given index in the table. Values, if specified, are set in the new row. Otherwise the row is empty.",
      "syntax": "tableObject.insertRow(index, values);",
      "signature": "insertRow(index: number, values: string[])",
      "restfulName": "insertRow",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Index where the row will be inserted in the table.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "values",
          "dataType": "string[]",
          "isCollection": true,
          "description": "Optional. Strings to insert in the new row, specified as an array. Must not have more values than columns in the table.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ]
    },
    {
      "name": "insertColumn",
      "returnType": "void",
      "description": "Inserts a column at the given index in the table. Values, if specified, are set in the new column. Otherwise the column is empty.",
      "syntax": "tableObject.insertColumn(index, values);",
      "signature": "insertColumn(index: number, values: string[])",
      "restfulName": "insertColumn",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Index where the column will be inserted in the table.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "values",
          "dataType": "string[]",
          "isCollection": true,
          "description": "Optional. Strings to insert in the new column, specified as an array. Must not have more values than rows in the table.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ]
    },
    {
      "name": "appendRow",
      "returnType": "TableRow",
      "description": "Adds a row to the end of the table. Values, if specified, are set in the new row. Otherwise the row is empty.",
      "syntax": "tableObject.appendRow(values);",
      "signature": "appendRow(values: string[])",
      "restfulName": "appendRow",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "values",
          "dataType": "string[]",
          "isCollection": true,
          "description": "Optional. Strings to insert in the new row, specified as an array. Must not have more values than columns in the table.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ]
    },
    {
      "name": "appendColumn",
      "returnType": "void",
      "description": "Adds a column to the end of the table. Values, if specified, are set in the new column. Otherwise the column is empty.",
      "syntax": "tableObject.appendColumn(values);",
      "signature": "appendColumn(values: string[])",
      "restfulName": "appendColumn",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "values",
          "dataType": "string[]",
          "isCollection": true,
          "description": "Optional. Strings to insert in the new column, specified as an array. Must not have more values than rows in the table.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ]
    },
    {
      "name": "getCell",
      "returnType": "TableCell",
      "description": "Gets the table cell at a specified row and column.",
      "syntax": "tableObject.getCell(rowIndex, cellIndex);",
      "signature": "getCell(rowIndex: number, cellIndex: number)",
      "restfulName": "Cell",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "rowIndex",
          "dataType": "number",
          "isCollection": false,
          "description": "The index of the row.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "cellIndex",
          "dataType": "number",
          "isCollection": false,
          "description": "The index of the cell in the row.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ]
    },
    {
      "name": "clear",
      "returnType": "void",
      "description": "Clears the contents of the table.",
      "syntax": "tableObject.clear();",
      "signature": "clear()",
      "restfulName": "clear",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null
    },
    {
      "name": "setShadingColor",
      "returnType": "void",
      "description": "Sets the shading color of all cells in the table.",
      "syntax": "tableObject.setShadingColor(colorCode);",
      "signature": "setShadingColor(colorCode: string)",
      "restfulName": "setShadingColor",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "colorCode",
          "dataType": "string",
          "isCollection": false,
          "description": "The color code to set the cells to./param",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ]
    },
    {
      "name": "load",
      "returnType": "void",
      "description": "Fills the proxy object created in JavaScript layer with property and object values specified in the parameter.",
      "syntax": "object.load(param);",
      "signature": "load(param: object)",
      "restfulName": null,
      "notes": null,
      "parameters": [
        {
          "name": "param",
          "dataType": "object",
          "description": "Accepts parameter and relationship names as delimited string or an array. Or, provide [loadOption](loadoption.md) object.",
          "isRequired": false,
          "enumNameJs": null,
          "possibleValues": null,
          "notes": null
        }
      ]
    }
  ]
}